#!/usr/bin/env ruby

class GitFileSource < Struct.new(:repo, :start_date, :branch)
  def files_by_commit
    commits.map do |commit_hash|
      files = %x{ git --git-dir=#{repo} diff-tree --no-commit-id --name-only -r #{commit_hash} }
      files.split("\n")
    end.reject(&:empty?)
  end

  private

  def commits
    commits = %x{ git --git-dir=#{repo} rev-list --since=#{start_date} #{branch} }
    commits.split("\n")
  end
end

file_source = GitFileSource.new('/Users/shep/Projects/jruby/.git', '2012-11-01', 'master')

class StatisticGenerator < Struct.new(:file_source)
  def files_in_modified_order
    counts = Hash.new(0)

    files_by_commit.flatten.each do |file|
      counts[file] += 1
    end

    counts.to_a.sort_by(&:last).reverse
  end

  def pairs_in_modified_order
    all_pairs = files_by_commit.flat_map do |files|
      files.combination(2).to_a
    end

    pair_counts = Hash.new(0)
    all_pairs.each do |pair|
      pair_counts[pair] += 1
    end

    pair_counts.to_a.sort_by(&:last).reverse
  end

  private

  def files_by_commit
    @files_by_commit ||= file_source.files_by_commit
  end
end

statistics = StatisticGenerator.new(file_source)

puts 'Most modified files:'

statistics.files_in_modified_order.first(5).each do |file, count|
  puts "#{count}: #{file}"
end

puts 'Most modified pairs:'

statistics.pairs_in_modified_order.first(5).each do |files, count|
  puts "#{count}: #{files.join(', ')}"
end
