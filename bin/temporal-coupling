#!/usr/bin/env ruby

lib_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH << lib_dir unless $LOAD_PATH.include? lib_dir

require 'optparse'
require 'temporal_coupling/git_file_source'
require 'temporal_coupling/file_filter'
require 'temporal_coupling/statistic_generator'
require 'temporal_coupling/statistic_file_cache'

DEFAULT_BRANCH = 'master'
DEFAULT_TOP_N = 5

options = {}
options[:filtered_files] = []
option_parser = OptionParser.new do |opts|
  opts.on('--repo REPO',
          "The path to the git repository. Must be the .git directory",
          "or a bare repository.") do |repo|
    options[:repo] = repo
  end

  opts.on('--since YYYY-MM-DD',
          "The date to start processing commits.") do |start_date|
    options[:start_date] = start_date
  end

  opts.on('--branch BRANCH',
          "The branch to process.",
          "Defaults to '#{DEFAULT_BRANCH}'.") do |branch|
    options[:branch] = branch
  end

  opts.on('--top NUM',
          "The number of files to show coupling information for.",
          "Defaults to #{DEFAULT_TOP_N}.") do |top_n|
    options[:top_n] = top_n.to_i
  end

  opts.on('--exclude-file REGEX',
          "Will not process files matching REGEX.") do |file|
    options[:filtered_files] << Regexp.new(file)
  end

  opts.on('--cache-dir DIRECTORY',
          "When provided, processed data will be cached. This allows",
          "for quick lookups after initial processing.") do |dir|
    options[:cache_dir] = dir
  end
end
option_parser.parse!

repo = options.fetch(:repo) do
  raise ArgumentError, "A git repository must be provided"
end
start_date = options.fetch(:start_date) do
  raise ArgumentError, "A start date must be provided"
end
branch = options.fetch(:branch, DEFAULT_BRANCH)

file_source = GitFileSource.new(repo, start_date, branch)
options[:filtered_files].each do |filter|
  file_source = FileFilter.new(filter, file_source)
end
statistics = StatisticGenerator.new(file_source)
if options[:cache_dir]
  statistics = StatisticFileCache.new(options[:cache_dir], statistics)
end

top_n = options.fetch(:top_n, DEFAULT_TOP_N)

puts 'Most modified files:'

statistics.files_in_modified_order.first(top_n).each do |file, count|
  puts "#{count}: #{file}"
end

puts 'Most modified pairs:'

statistics.pairs_in_modified_order.first(top_n).each do |files, count|
  puts "#{count}: #{files.join(', ')}"
end

puts 'Common pairs for rapidly churning files'

statistics.files_in_modified_order.first(top_n).each do |file, count|
  pairs_including_file = statistics.pairs_in_modified_order.select do |files, count|
    files.any? {|f| file == f}
  end

  puts "== Files changed at the same time as #{file}"

  pairs_including_file.first(10).each do |files, pair_count|
    other_files = files.reject {|f| file == f}
    percent = pair_count.to_f / count
    percent_str = "%.2f%%" % (percent * 100)
    puts "#{pair_count} / #{count} (#{percent_str}): #{other_files.join(', ')}"
  end
end
